#!/bin/bash

# Script para build multi-arquitetura e push para Docker Hub
# FCI - API Youtube v1
# Autor: Mateus Gomes

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Build Multi-Arquitetura - FCI API Youtube v1${NC}"
echo "======================================================"

# Verificar se o usu√°rio Docker Hub foi fornecido
if [ -z "$1" ]; then
    echo -e "${RED}‚ùå Erro: √â necess√°rio fornecer o usu√°rio do Docker Hub${NC}"
    echo -e "${YELLOW}Uso: $0 <seu-usuario-dockerhub> [versao]${NC}"
    echo -e "${YELLOW}Exemplo: $0 mateusgomes 1.0.0${NC}"
    exit 1
fi

DOCKER_USER="$1"
VERSION="${2:-latest}"
IMAGE_NAME="$DOCKER_USER/fci-api-youtube-v1"

echo -e "${BLUE}üìã Configura√ß√µes:${NC}"
echo "   ‚Ä¢ Usu√°rio Docker Hub: $DOCKER_USER"
echo "   ‚Ä¢ Nome da Imagem: $IMAGE_NAME"
echo "   ‚Ä¢ Vers√£o: $VERSION"
echo "   ‚Ä¢ Arquiteturas: linux/amd64, linux/arm64"
echo ""

# Verificar se est√° logado no Docker Hub
echo -e "${YELLOW}üîê Verificando login no Docker Hub...${NC}"
if ! docker info | grep -q "Username"; then
    echo -e "${YELLOW}‚ö†Ô∏è  N√£o est√° logado. Fazendo login...${NC}"
    docker login
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Falha no login do Docker Hub${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Login verificado${NC}"

# Verificar se buildx est√° dispon√≠vel
echo -e "${YELLOW}üîß Verificando Docker Buildx...${NC}"
if ! docker buildx version &> /dev/null; then
    echo -e "${RED}‚ùå Docker Buildx n√£o est√° dispon√≠vel${NC}"
    echo "Instale o Docker Desktop ou atualize para uma vers√£o mais recente"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker Buildx dispon√≠vel${NC}"

# Criar builder multi-arquitetura se n√£o existir
echo -e "${YELLOW}üèóÔ∏è  Configurando builder multi-arquitetura...${NC}"
if ! docker buildx ls | grep -q "multiarch-builder"; then
    echo "Criando novo builder..."
    docker buildx create --name multiarch-builder --use
    docker buildx inspect --bootstrap
else
    echo "Usando builder existente..."
    docker buildx use multiarch-builder
fi

echo -e "${GREEN}‚úÖ Builder configurado${NC}"

# Build e push da imagem
echo -e "${YELLOW}üî® Iniciando build multi-arquitetura...${NC}"
echo "   Isso pode levar alguns minutos..."
echo ""

docker buildx build \
    --platform linux/amd64,linux/arm64 \
    --file docker/Dockerfile \
    --tag "$IMAGE_NAME:$VERSION" \
    --tag "$IMAGE_NAME:latest" \
    --push \
    .

if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ BUILD E PUSH CONCLU√çDOS COM SUCESSO!${NC}"
    echo "======================================================"
    echo -e "${BLUE}üì¶ Imagem dispon√≠vel no Docker Hub:${NC}"
    echo "   ‚Ä¢ $IMAGE_NAME:$VERSION"
    echo "   ‚Ä¢ $IMAGE_NAME:latest"
    echo ""
    echo -e "${BLUE}üñ•Ô∏è  Para usar no Mac (ARM64):${NC}"
    echo "   docker run -p 3000:3000 $IMAGE_NAME:$VERSION"
    echo ""
    echo -e "${BLUE}üêß Para usar no Linux (AMD64):${NC}"
    echo "   docker run -p 3000:3000 $IMAGE_NAME:$VERSION"
    echo ""
    echo -e "${BLUE}üìã Docker Compose (substitua no seu docker-compose.yml):${NC}"
    echo "   image: $IMAGE_NAME:$VERSION"
    echo ""
    echo -e "${GREEN}‚úÖ Compat√≠vel com Mac M1/M2 e servidores Linux!${NC}"
else
    echo -e "${RED}‚ùå Falha no build ou push${NC}"
    exit 1
fi 