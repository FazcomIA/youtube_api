const YouTubeExtractor = require('../services/youtubeService');
const { YoutubeCommentDownloader } = require('../services/youtube_comment_downloader');

// Inst√¢ncias dos servi√ßos
const youtubeExtractor = new YouTubeExtractor();
const commentDownloader = new YoutubeCommentDownloader();

/**
 * Controller para obter v√≠deo mais recente de um canal
 */
const getLatestVideo = async (req, res) => {
  try {
    const { channelHandle } = req.body;
    
    if (!channelHandle) {
      return res.status(400).json({ erro: '√â necess√°rio fornecer o handle do canal (ex: @nomedocanal)' });
    }
    
    console.log(`üîç Buscando v√≠deo mais recente do canal: ${channelHandle}`);
    const videoInfo = await youtubeExtractor.getLatestVideo(channelHandle);
    
    // Adicionar propriedade 'data' convertendo dataPublicacao
    if (videoInfo.dataPublicacao) {
      videoInfo.data = commentDownloader.converterDataRelativa(videoInfo.dataPublicacao);
    }
    
    // Garantir que sempre temos as propriedades title e titulo
    if (videoInfo.titulo && !videoInfo.title) {
      videoInfo.title = videoInfo.titulo;
    } else if (videoInfo.title && !videoInfo.titulo) {
      videoInfo.titulo = videoInfo.title;
    }
    
    // Validar se conseguimos obter pelo menos o t√≠tulo
    if (!videoInfo.titulo && !videoInfo.title) {
      console.warn('‚ö†Ô∏è Nenhum t√≠tulo foi extra√≠do do v√≠deo');
      videoInfo.titulo = 'T√≠tulo n√£o dispon√≠vel';
      videoInfo.title = 'T√≠tulo n√£o dispon√≠vel';
    }
    
    console.log(`‚úÖ V√≠deo mais recente encontrado: ${videoInfo.titulo || videoInfo.title}`);
    res.json(videoInfo);
  } catch (erro) {
    console.error('Erro ao processar requisi√ß√£o:', erro);
    res.status(500).json({ 
      erro: 'Erro ao obter v√≠deo mais recente',
      mensagem: erro.message 
    });
  }
};

/**
 * Controller para obter informa√ß√µes de um v√≠deo espec√≠fico
 */
const getVideoInfo = async (req, res) => {
  try {
    const { videoUrl } = req.body;
    
    if (!videoUrl) {
      return res.status(400).json({ erro: '√â necess√°rio fornecer a URL do v√≠deo' });
    }
    
    // Validar se √© uma URL v√°lida do YouTube
    const youtubeUrlPattern = /^(https?:\/\/)?(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)/;
    if (!youtubeUrlPattern.test(videoUrl)) {
      return res.status(400).json({ erro: 'URL deve ser um v√≠deo v√°lido do YouTube' });
    }
    
    console.log(`üîç Buscando informa√ß√µes do v√≠deo: ${videoUrl}`);
    
    // Extrair informa√ß√µes detalhadas do v√≠deo
    const videoInfo = await youtubeExtractor.getVideoDetails(videoUrl);
    
    // Verificar se houve erro na extra√ß√£o
    if (videoInfo.erro) {
      console.warn(`‚ö†Ô∏è Erro durante extra√ß√£o: ${videoInfo.erro}`);
    }
    
    // Adicionar propriedade 'data' convertendo dataPublicacao
    if (videoInfo.dataPublicacao) {
      videoInfo.data = commentDownloader.converterDataRelativa(videoInfo.dataPublicacao);
    }
    
    // Garantir que sempre temos as propriedades title e titulo
    if (videoInfo.titulo && !videoInfo.title) {
      videoInfo.title = videoInfo.titulo;
    } else if (videoInfo.title && !videoInfo.titulo) {
      videoInfo.titulo = videoInfo.title;
    }
    
    // Validar se conseguimos obter pelo menos o t√≠tulo
    if (!videoInfo.titulo && !videoInfo.title) {
      console.warn('‚ö†Ô∏è Nenhum t√≠tulo foi extra√≠do do v√≠deo');
      videoInfo.titulo = 'T√≠tulo n√£o dispon√≠vel';
      videoInfo.title = 'T√≠tulo n√£o dispon√≠vel';
    }
    
    // Adicionar URL do v√≠deo na resposta
    videoInfo.url = videoUrl;
    
    // Garantir que temos valores num√©ricos v√°lidos
    videoInfo.visualizacoes = videoInfo.visualizacoes || 0;
    videoInfo.likes = videoInfo.likes || 0;
    videoInfo.comentarios = videoInfo.comentarios || 0;
    videoInfo.duracao = videoInfo.duracao || 0;
    
    // Garantir que temos arrays v√°lidos
    videoInfo.tags = videoInfo.tags || [];
    
    console.log(`‚úÖ Informa√ß√µes do v√≠deo obtidas: ${videoInfo.titulo || videoInfo.title}`);
    console.log(`üìä Dados extra√≠dos: visualiza√ß√µes=${videoInfo.visualizacoes}, likes=${videoInfo.likes}, coment√°rios=${videoInfo.comentarios}`);
    
    res.json(videoInfo);
  } catch (erro) {
    console.error('Erro ao processar requisi√ß√£o:', erro);
    res.status(500).json({ 
      erro: 'Erro ao obter informa√ß√µes do v√≠deo',
      mensagem: erro.message 
    });
  }
};

module.exports = {
  getLatestVideo,
  getVideoInfo
}; 