const express = require('express');
const cors = require('cors');
const swaggerJsDoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const { obterComentarios, ORDENACAO_POPULARES, ORDENACAO_RECENTES } = require('./api_comentarios');
const { YoutubeCommentDownloader } = require('./youtube_comment_downloader');
const { searchYouTube } = require('./youtube-search');
const YouTubeExtractor = require('./index');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(cors());

// Configura√ß√£o do Swagger
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'YouTube API Unificada',
      version: '1.0.0',
      description: 'API unificada para extra√ß√£o de informa√ß√µes e coment√°rios de v√≠deos do YouTube'
    },
    servers: [
      {
        url: `http://localhost:${PORT}`,
        description: 'Servidor de desenvolvimento'
      }
    ]
  },
  apis: ['./server.js']
};

const swaggerDocs = swaggerJsDoc(swaggerOptions);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));

// Inst√¢ncia do extrator de v√≠deos e conversor de data
const youtubeExtractor = new YouTubeExtractor();
const commentDownloader = new YoutubeCommentDownloader();

// Rota inicial
app.get('/', (req, res) => {
  res.json({
    message: 'YouTube API Unificada - Informa√ß√µes e Coment√°rios',
    documentacao: `/api-docs`,
    endpoints: {
      ytSearch: 'POST /api/yt_search',
      comments: 'POST /api/comments',
      ytLastVideo: 'POST /api/yt_last_video'
    }
  });
});

/**
 * @swagger
 * /api/yt_search:
 *   post:
 *     summary: Pesquisa v√≠deos no YouTube
 *     description: Retorna resultados de pesquisa do YouTube com informa√ß√µes detalhadas
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - query
 *             properties:
 *               query:
 *                 type: string
 *                 description: Termo de pesquisa
 *                 example: "javascript tutorial"
 *               limit:
 *                 type: integer
 *                 description: N√∫mero m√°ximo de resultados (1-50)
 *                 default: 10
 *                 minimum: 1
 *                 maximum: 50
 *               order:
 *                 type: string
 *                 description: Tipo de ordena√ß√£o dos resultados
 *                 enum: [relevance, date, views]
 *                 default: relevance
 *     responses:
 *       200:
 *         description: Lista de resultados da pesquisa
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   titulo:
 *                     type: string
 *                     description: T√≠tulo do v√≠deo
 *                   url:
 *                     type: string
 *                     description: URL do v√≠deo no YouTube
 *                   dataPublicacao:
 *                     type: string
 *                     description: Data de publica√ß√£o (ex - h√° 2 dias)
 *                   data:
 *                     type: string
 *                     description: Data formatada como DD-MM-YYYY
 *                   nomeCanal:
 *                     type: string
 *                     description: Nome do canal
 *                   handleCanal:
 *                     type: string
 *                     description: Handle do canal (ex - @nomedocanal)
 *                   visualizacoes:
 *                     type: integer
 *                     description: N√∫mero de visualiza√ß√µes
 *                   duracao:
 *                     type: integer
 *                     description: Dura√ß√£o em segundos
 *                   thumbnail:
 *                     type: string
 *                     description: URL da thumbnail
 *                   descricao:
 *                     type: string
 *                     description: Descri√ß√£o do v√≠deo
 *       400:
 *         description: Erro na requisi√ß√£o
 *       500:
 *         description: Erro interno do servidor
 */
app.post('/api/yt_search', async (req, res) => {
  try {
    const { query, limit = 10, order = 'relevance' } = req.body;
    
    if (!query) {
      return res.status(400).json({ erro: '√â necess√°rio fornecer um termo de pesquisa (query)' });
    }
    
    console.log(`üîç Pesquisando v√≠deos: "${query}" (limite: ${limit}, ordena√ß√£o: ${order})`);
    const resultados = await searchYouTube(query, { limit, order });
    
    console.log(`‚úÖ Retornando ${resultados.length} resultados da pesquisa`);
    res.json(resultados);
  } catch (erro) {
    console.error('Erro ao processar pesquisa:', erro);
    res.status(500).json({ 
      erro: 'Erro ao pesquisar v√≠deos',
      mensagem: erro.message 
    });
  }
});

/**
 * @swagger
 * /api/comments:
 *   post:
 *     summary: Obt√©m coment√°rios de um v√≠deo do YouTube
 *     description: Retorna os coment√°rios de um v√≠deo do YouTube com base na URL ou ID fornecido
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - videoIdOuUrl
 *             properties:
 *               videoIdOuUrl:
 *                 type: string
 *                 description: ID ou URL completa do v√≠deo do YouTube
 *               limite:
 *                 type: integer
 *                 description: N√∫mero m√°ximo de coment√°rios a serem retornados
 *                 default: 50
 *               idioma:
 *                 type: string
 *                 description: C√≥digo do idioma para os coment√°rios
 *                 default: pt
 *               ordenacao:
 *                 type: integer
 *                 description: Tipo de ordena√ß√£o (1 = mais recentes, 0 = mais populares)
 *                 default: 1
 *     responses:
 *       200:
 *         description: Lista de coment√°rios
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   cid:
 *                     type: string
 *                     description: ID do coment√°rio
 *                   user:
 *                     type: string
 *                     description: Nome do autor do coment√°rio
 *                   text:
 *                     type: string
 *                     description: Texto do coment√°rio
 *                   time:
 *                     type: string
 *                     description: Tempo relativo (ex - h√° 2 dias)
 *                   data:
 *                     type: string
 *                     description: Data formatada como DD-MM-YYYY
 *                   respostas:
 *                     type: integer
 *                     description: N√∫mero de respostas ao coment√°rio
 *       400:
 *         description: Erro na requisi√ß√£o
 *       500:
 *         description: Erro interno do servidor
 */
app.post('/api/comments', async (req, res) => {
  try {
    const { videoIdOuUrl, limite = 50, idioma = 'pt', ordenacao = 1 } = req.body;
    
    if (!videoIdOuUrl) {
      return res.status(400).json({ erro: '√â necess√°rio fornecer o ID do v√≠deo ou a URL' });
    }
    
    console.log(`üîç Buscando coment√°rios para: ${videoIdOuUrl}`);
    const comentarios = await obterComentarios(videoIdOuUrl, { limite, idioma, ordenacao });
    
    console.log(`‚úÖ Encontrados ${comentarios.length} coment√°rios`);
    res.json(comentarios);
  } catch (erro) {
    console.error('Erro ao processar requisi√ß√£o:', erro);
    res.status(500).json({ 
      erro: 'Erro ao obter coment√°rios',
      mensagem: erro.message 
    });
  }
});

/**
 * @swagger
 * /api/yt_last_video:
 *   post:
 *     summary: Obt√©m informa√ß√µes do v√≠deo mais recente de um canal
 *     description: Retorna informa√ß√µes detalhadas do v√≠deo mais recente de um canal do YouTube
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - channelHandle
 *             properties:
 *               channelHandle:
 *                 type: string
 *                 description: Handle do canal (ex - @nomedocanal)
 *                 example: "@RedCastOficial"
 *     responses:
 *       200:
 *         description: Informa√ß√µes do v√≠deo mais recente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 videoId:
 *                   type: string
 *                   description: ID do v√≠deo
 *                 titulo:
 *                   type: string
 *                   description: T√≠tulo do v√≠deo
 *                 descricao:
 *                   type: string
 *                   description: Descri√ß√£o do v√≠deo
 *                 autor:
 *                   type: string
 *                   description: Nome do canal/autor
 *                 channelId:
 *                   type: string
 *                   description: ID do canal
 *                 url:
 *                   type: string
 *                   description: URL do v√≠deo
 *                 thumbnail:
 *                   type: string
 *                   description: URL da thumbnail
 *                 visualizacoes:
 *                   type: integer
 *                   description: N√∫mero de visualiza√ß√µes
 *                 likes:
 *                   type: integer
 *                   description: N√∫mero de likes
 *                 duracao:
 *                   type: integer
 *                   description: Dura√ß√£o em segundos
 *                 dataPublicacao:
 *                   type: string
 *                   description: Data de publica√ß√£o
 *                 data:
 *                   type: string
 *                   description: Data formatada como DD-MM-YYYY
 *                 tags:
 *                   type: array
 *                   items:
 *                     type: string
 *                   description: Tags do v√≠deo
 *       400:
 *         description: Erro na requisi√ß√£o
 *       500:
 *         description: Erro interno do servidor
 */
app.post('/api/yt_last_video', async (req, res) => {
  try {
    const { channelHandle } = req.body;
    
    if (!channelHandle) {
      return res.status(400).json({ erro: '√â necess√°rio fornecer o handle do canal (ex: @nomedocanal)' });
    }
    
    console.log(`üîç Buscando v√≠deo mais recente do canal: ${channelHandle}`);
    const videoInfo = await youtubeExtractor.getLatestVideo(channelHandle);
    
    // Adicionar propriedade 'data' convertendo dataPublicacao
    if (videoInfo.dataPublicacao) {
      videoInfo.data = commentDownloader.converterDataRelativa(videoInfo.dataPublicacao);
    }
    
    console.log(`‚úÖ V√≠deo mais recente encontrado: ${videoInfo.titulo}`);
    res.json(videoInfo);
  } catch (erro) {
    console.error('Erro ao processar requisi√ß√£o:', erro);
    res.status(500).json({ 
      erro: 'Erro ao obter v√≠deo mais recente',
      mensagem: erro.message 
    });
  }
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log('üöÄ YouTube API Unificada iniciada!');
  console.log(`üì° Servidor rodando em http://localhost:${PORT}`);
  console.log(`üìö Documenta√ß√£o Swagger dispon√≠vel em http://localhost:${PORT}/api-docs`);
  console.log('\nüìã Endpoints dispon√≠veis:');
  console.log('  ‚Ä¢ POST /api/yt_search - Pesquisar v√≠deos no YouTube');
  console.log('  ‚Ä¢ POST /api/comments - Obter coment√°rios de v√≠deos');
  console.log('  ‚Ä¢ POST /api/yt_last_video - Obter v√≠deo mais recente de um canal');
}); 